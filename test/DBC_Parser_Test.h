#ifndef AUTO_DBC_PARSER_TEST_H
#define AUTO_DBC_PARSER_TEST_H
/****************************************************
********* AUTOCODE GENERATED BY dbc_parser2 *********
*********           DO NOT CHANGE           *********
****************************************************/

/**
 * \page page DBC_PARSER_TEST
 */
/**
 * \section Message VECTOR__INDEPENDENT_SIG_MSG
 */
/********************* COMMENT **********************
This is a message for not used signals, created by Vector CANdb++ DBC OLE DB Provider.
****************************************************/

/**
 * \brief ID of message 'VECTOR__INDEPENDENT_SIG_MSG'
 */
#define ID_VECTOR__INDEPENDENT_SIG_MSG 0x0

/**
 * \brief Is ID of message 'VECTOR__INDEPENDENT_SIG_MSG' extended?
 */
#define EXT_VECTOR__INDEPENDENT_SIG_MSG true

/**
 * \brief DLC of message 'VECTOR__INDEPENDENT_SIG_MSG'
 */
#define DLC_VECTOR__INDEPENDENT_SIG_MSG 0

/**
 * \brief SETTERs for message 'VECTOR__INDEPENDENT_SIG_MSG'
 * - SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I(buf, value)
 * - SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I(buf, value)
 * - SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M(buf, value)
 * - SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M(buf, value)
 */

/**
 * \brief GETTERs for message 'VECTOR__INDEPENDENT_SIG_MSG'
 * - GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I(buf)
 * - GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I(buf)
 * - GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M(buf)
 * - GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M(buf)
 */

/**
 * \subsection Signal Signal_23_Bit_Signed_I
 */
/**
 * \paragraph Constants
 */
#define UNIT_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I   ""
#define OFFSET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I 0
#define FACTOR_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I 1
#define MIN_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I    0
#define MAX_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I    0

#define CAN_TO_REAL_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I(x) ((x) * 1 + 0)
#define REAL_TO_CAN_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I(x) (int32_t)(((x) - 0) / 1)

#define SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0xFF << 0);\
   buf[0] |=  (uint8_t)(((val) >>  0) & 0xFF) << 0;\
   buf[1] &= ~(uint8_t)(0xFF << 0);\
   buf[1] |=  (uint8_t)(((val) >>  8) & 0xFF) << 0;\
   buf[2] &= ~(uint8_t)(0x7F << 0);\
   buf[2] |=  (uint8_t)(((val) >> 16) & 0x7F) << 0;\
}

#define SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I(buf,val) \
   SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I_Raw(buf,REAL_TO_CAN_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I(val))

#define GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I_Raw(buf) (int32_t) (0\
   | ((+(uint32_t)(buf[0] >> 0) & 0xFF) << 0) \
   | ((+(uint32_t)(buf[1] >> 0) & 0xFF) << 8) \
   | ((+(uint32_t)(buf[2] >> 0) & 0x7F) << 16) \
)

// Necessary for singed signals with length that is not 1, 8, 16, 32 or 64 bits.
#define SIGNED_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I(val) \
   ((((val)&0x400000)>0) ? ((int32_t)((val)|0xFF800000)) : ((int32_t)(val)))

#define GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I(buf) \
   CAN_TO_REAL_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I(SIGNED_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I(GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_I_Raw(buf)))

/**
 * \subsection Signal Signal_23_Bit_Unsigned_I
 */
/**
 * \paragraph Constants
 */
#define UNIT_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I   ""
#define OFFSET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I 0
#define FACTOR_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I 1
#define MIN_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I    0
#define MAX_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I    0

#define CAN_TO_REAL_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I(x) ((x) * 1 + 0)
#define REAL_TO_CAN_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I(x) (uint32_t)(((x) - 0) / 1)

#define SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0xFF << 0);\
   buf[0] |=  (uint8_t)(((val) >>  0) & 0xFF) << 0;\
   buf[1] &= ~(uint8_t)(0xFF << 0);\
   buf[1] |=  (uint8_t)(((val) >>  8) & 0xFF) << 0;\
   buf[2] &= ~(uint8_t)(0x7F << 0);\
   buf[2] |=  (uint8_t)(((val) >> 16) & 0x7F) << 0;\
}

#define SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I(buf,val) \
   SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I_Raw(buf,REAL_TO_CAN_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I(val))

#define GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I_Raw(buf) (uint32_t) (0\
   | ((+(uint32_t)(buf[0] >> 0) & 0xFF) << 0) \
   | ((+(uint32_t)(buf[1] >> 0) & 0xFF) << 8) \
   | ((+(uint32_t)(buf[2] >> 0) & 0x7F) << 16) \
)

#define GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I(buf) \
   CAN_TO_REAL_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I(GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_I_Raw(buf))

/**
 * \subsection Signal Signal_23_Bit_Unsigned_M
 */
/**
 * \paragraph Constants
 */
#define UNIT_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M   ""
#define OFFSET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M 0
#define FACTOR_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M 1
#define MIN_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M    0
#define MAX_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M    0

#define CAN_TO_REAL_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M(x) ((x) * 1 + 0)
#define REAL_TO_CAN_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M(x) (uint32_t)(((x) - 0) / 1)

#define SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0x01 << 0);\
   buf[0] |=  (uint8_t)(((val) >> 22) & 0x01) << 0;\
   buf[1] &= ~(uint8_t)(0xFF << 0);\
   buf[1] |=  (uint8_t)(((val) >> 14) & 0xFF) << 0;\
   buf[2] &= ~(uint8_t)(0xFF << 0);\
   buf[2] |=  (uint8_t)(((val) >>  6) & 0xFF) << 0;\
   buf[3] &= ~(uint8_t)(0x3F << 2);\
   buf[3] |=  (uint8_t)(((val) >>  0) & 0x3F) << 2;\
}

#define SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M(buf,val) \
   SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M_Raw(buf,REAL_TO_CAN_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M(val))

#define GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M_Raw(buf) (uint32_t) (0\
   | ((+(uint32_t)(buf[0] >> 0) & 0x01) << 22) \
   | ((+(uint32_t)(buf[1] >> 0) & 0xFF) << 14) \
   | ((+(uint32_t)(buf[2] >> 0) & 0xFF) << 6) \
   | ((+(uint32_t)(buf[3] >> 2) & 0x3F) << 0) \
)

#define GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M(buf) \
   CAN_TO_REAL_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M(GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Unsigned_M_Raw(buf))

/**
 * \subsection Signal Signal_23_Bit_Signed_M
 */
/**
 * \paragraph Constants
 */
#define UNIT_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M   ""
#define OFFSET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M 0
#define FACTOR_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M 1
#define MIN_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M    0
#define MAX_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M    0

#define CAN_TO_REAL_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M(x) ((x) * 1 + 0)
#define REAL_TO_CAN_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M(x) (int32_t)(((x) - 0) / 1)

#define SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0x01 << 0);\
   buf[0] |=  (uint8_t)(((val) >> 22) & 0x01) << 0;\
   buf[1] &= ~(uint8_t)(0xFF << 0);\
   buf[1] |=  (uint8_t)(((val) >> 14) & 0xFF) << 0;\
   buf[2] &= ~(uint8_t)(0xFF << 0);\
   buf[2] |=  (uint8_t)(((val) >>  6) & 0xFF) << 0;\
   buf[3] &= ~(uint8_t)(0x3F << 2);\
   buf[3] |=  (uint8_t)(((val) >>  0) & 0x3F) << 2;\
}

#define SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M(buf,val) \
   SET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M_Raw(buf,REAL_TO_CAN_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M(val))

#define GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M_Raw(buf) (int32_t) (0\
   | ((+(uint32_t)(buf[0] >> 0) & 0x01) << 22) \
   | ((+(uint32_t)(buf[1] >> 0) & 0xFF) << 14) \
   | ((+(uint32_t)(buf[2] >> 0) & 0xFF) << 6) \
   | ((+(uint32_t)(buf[3] >> 2) & 0x3F) << 0) \
)

// Necessary for singed signals with length that is not 1, 8, 16, 32 or 64 bits.
#define SIGNED_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M(val) \
   ((((val)&0x400000)>0) ? ((int32_t)((val)|0xFF800000)) : ((int32_t)(val)))

#define GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M(buf) \
   CAN_TO_REAL_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M(SIGNED_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M(GET_VECTOR__INDEPENDENT_SIG_MSG_Signal_23_Bit_Signed_M_Raw(buf)))

/**
 * \section Message Message10
 */
/**
 * \brief ID of message 'Message10'
 */
#define ID_Message10 0xA

/**
 * \brief Is ID of message 'Message10' extended?
 */
#define EXT_Message10 false

/**
 * \brief DLC of message 'Message10'
 */
#define DLC_Message10 8

/**
 * \brief SETTERs for message 'Message10'
 * - SET_Message10_Signal_12_Bit_Signed_I_Factor(buf, value)
 * - SET_Message10_Signal_12_Bit_Signed_M_Factor(buf, value)
 * - SET_Message10_Signal_12_Bit_Unsigned_I_Factor(buf, value)
 * - SET_Message10_Signal_12_Bit_Unsigned_M_Factor(buf, value)
 */

/**
 * \brief GETTERs for message 'Message10'
 * - GET_Message10_Signal_12_Bit_Signed_I_Factor(buf)
 * - GET_Message10_Signal_12_Bit_Signed_M_Factor(buf)
 * - GET_Message10_Signal_12_Bit_Unsigned_I_Factor(buf)
 * - GET_Message10_Signal_12_Bit_Unsigned_M_Factor(buf)
 */

/**
 * \subsection Signal Signal_12_Bit_Signed_I_Factor
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message10_Signal_12_Bit_Signed_I_Factor   ""
#define OFFSET_Message10_Signal_12_Bit_Signed_I_Factor 10
#define FACTOR_Message10_Signal_12_Bit_Signed_I_Factor 0.1
#define MIN_Message10_Signal_12_Bit_Signed_I_Factor    0
#define MAX_Message10_Signal_12_Bit_Signed_I_Factor    0

#define CAN_TO_REAL_Message10_Signal_12_Bit_Signed_I_Factor(x) ((x) * 0.1 + 10)
#define REAL_TO_CAN_Message10_Signal_12_Bit_Signed_I_Factor(x) (int16_t)(((x) - 10) / 0.1)

#define SET_Message10_Signal_12_Bit_Signed_I_Factor_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0xFF << 0);\
   buf[0] |=  (uint8_t)(((val) >>  0) & 0xFF) << 0;\
   buf[1] &= ~(uint8_t)(0x0F << 0);\
   buf[1] |=  (uint8_t)(((val) >>  8) & 0x0F) << 0;\
}

#define SET_Message10_Signal_12_Bit_Signed_I_Factor(buf,val) \
   SET_Message10_Signal_12_Bit_Signed_I_Factor_Raw(buf,REAL_TO_CAN_Message10_Signal_12_Bit_Signed_I_Factor(val))

#define GET_Message10_Signal_12_Bit_Signed_I_Factor_Raw(buf) (int16_t) (0\
   | ((+(uint16_t)(buf[0] >> 0) & 0xFF) << 0) \
   | ((+(uint16_t)(buf[1] >> 0) & 0x0F) << 8) \
)

// Necessary for singed signals with length that is not 1, 8, 16, 32 or 64 bits.
#define SIGNED_Message10_Signal_12_Bit_Signed_I_Factor(val) \
   ((((val)&0x800)>0) ? ((int16_t)((val)|0xF000)) : ((int16_t)(val)))

#define GET_Message10_Signal_12_Bit_Signed_I_Factor(buf) \
   CAN_TO_REAL_Message10_Signal_12_Bit_Signed_I_Factor(SIGNED_Message10_Signal_12_Bit_Signed_I_Factor(GET_Message10_Signal_12_Bit_Signed_I_Factor_Raw(buf)))

/**
 * \subsection Signal Signal_12_Bit_Signed_M_Factor
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message10_Signal_12_Bit_Signed_M_Factor   ""
#define OFFSET_Message10_Signal_12_Bit_Signed_M_Factor 10
#define FACTOR_Message10_Signal_12_Bit_Signed_M_Factor 0.1
#define MIN_Message10_Signal_12_Bit_Signed_M_Factor    0
#define MAX_Message10_Signal_12_Bit_Signed_M_Factor    0

#define CAN_TO_REAL_Message10_Signal_12_Bit_Signed_M_Factor(x) ((x) * 0.1 + 10)
#define REAL_TO_CAN_Message10_Signal_12_Bit_Signed_M_Factor(x) (int16_t)(((x) - 10) / 0.1)

#define SET_Message10_Signal_12_Bit_Signed_M_Factor_Raw(buf,val) {\
   buf[2] &= ~(uint8_t)(0x7F << 0);\
   buf[2] |=  (uint8_t)(((val) >>  5) & 0x7F) << 0;\
   buf[3] &= ~(uint8_t)(0x1F << 3);\
   buf[3] |=  (uint8_t)(((val) >>  0) & 0x1F) << 3;\
}

#define SET_Message10_Signal_12_Bit_Signed_M_Factor(buf,val) \
   SET_Message10_Signal_12_Bit_Signed_M_Factor_Raw(buf,REAL_TO_CAN_Message10_Signal_12_Bit_Signed_M_Factor(val))

#define GET_Message10_Signal_12_Bit_Signed_M_Factor_Raw(buf) (int16_t) (0\
   | ((+(uint16_t)(buf[2] >> 0) & 0x7F) << 5) \
   | ((+(uint16_t)(buf[3] >> 3) & 0x1F) << 0) \
)

// Necessary for singed signals with length that is not 1, 8, 16, 32 or 64 bits.
#define SIGNED_Message10_Signal_12_Bit_Signed_M_Factor(val) \
   ((((val)&0x800)>0) ? ((int16_t)((val)|0xF000)) : ((int16_t)(val)))

#define GET_Message10_Signal_12_Bit_Signed_M_Factor(buf) \
   CAN_TO_REAL_Message10_Signal_12_Bit_Signed_M_Factor(SIGNED_Message10_Signal_12_Bit_Signed_M_Factor(GET_Message10_Signal_12_Bit_Signed_M_Factor_Raw(buf)))

/**
 * \subsection Signal Signal_12_Bit_Unsigned_I_Factor
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message10_Signal_12_Bit_Unsigned_I_Factor   ""
#define OFFSET_Message10_Signal_12_Bit_Unsigned_I_Factor 10
#define FACTOR_Message10_Signal_12_Bit_Unsigned_I_Factor 0.1
#define MIN_Message10_Signal_12_Bit_Unsigned_I_Factor    0
#define MAX_Message10_Signal_12_Bit_Unsigned_I_Factor    0

#define CAN_TO_REAL_Message10_Signal_12_Bit_Unsigned_I_Factor(x) ((x) * 0.1 + 10)
#define REAL_TO_CAN_Message10_Signal_12_Bit_Unsigned_I_Factor(x) (uint16_t)(((x) - 10) / 0.1)

#define SET_Message10_Signal_12_Bit_Unsigned_I_Factor_Raw(buf,val) {\
   buf[4] &= ~(uint8_t)(0x1F << 3);\
   buf[4] |=  (uint8_t)(((val) >>  0) & 0x1F) << 3;\
   buf[5] &= ~(uint8_t)(0x7F << 0);\
   buf[5] |=  (uint8_t)(((val) >>  5) & 0x7F) << 0;\
}

#define SET_Message10_Signal_12_Bit_Unsigned_I_Factor(buf,val) \
   SET_Message10_Signal_12_Bit_Unsigned_I_Factor_Raw(buf,REAL_TO_CAN_Message10_Signal_12_Bit_Unsigned_I_Factor(val))

#define GET_Message10_Signal_12_Bit_Unsigned_I_Factor_Raw(buf) (uint16_t) (0\
   | ((+(uint16_t)(buf[4] >> 3) & 0x1F) << 0) \
   | ((+(uint16_t)(buf[5] >> 0) & 0x7F) << 5) \
)

#define GET_Message10_Signal_12_Bit_Unsigned_I_Factor(buf) \
   CAN_TO_REAL_Message10_Signal_12_Bit_Unsigned_I_Factor(GET_Message10_Signal_12_Bit_Unsigned_I_Factor_Raw(buf))

/**
 * \subsection Signal Signal_12_Bit_Unsigned_M_Factor
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message10_Signal_12_Bit_Unsigned_M_Factor   ""
#define OFFSET_Message10_Signal_12_Bit_Unsigned_M_Factor 10
#define FACTOR_Message10_Signal_12_Bit_Unsigned_M_Factor 0.1
#define MIN_Message10_Signal_12_Bit_Unsigned_M_Factor    0
#define MAX_Message10_Signal_12_Bit_Unsigned_M_Factor    0

#define CAN_TO_REAL_Message10_Signal_12_Bit_Unsigned_M_Factor(x) ((x) * 0.1 + 10)
#define REAL_TO_CAN_Message10_Signal_12_Bit_Unsigned_M_Factor(x) (uint16_t)(((x) - 10) / 0.1)

#define SET_Message10_Signal_12_Bit_Unsigned_M_Factor_Raw(buf,val) {\
   buf[6] &= ~(uint8_t)(0xFF << 0);\
   buf[6] |=  (uint8_t)(((val) >>  4) & 0xFF) << 0;\
   buf[7] &= ~(uint8_t)(0x0F << 4);\
   buf[7] |=  (uint8_t)(((val) >>  0) & 0x0F) << 4;\
}

#define SET_Message10_Signal_12_Bit_Unsigned_M_Factor(buf,val) \
   SET_Message10_Signal_12_Bit_Unsigned_M_Factor_Raw(buf,REAL_TO_CAN_Message10_Signal_12_Bit_Unsigned_M_Factor(val))

#define GET_Message10_Signal_12_Bit_Unsigned_M_Factor_Raw(buf) (uint16_t) (0\
   | ((+(uint16_t)(buf[6] >> 0) & 0xFF) << 4) \
   | ((+(uint16_t)(buf[7] >> 4) & 0x0F) << 0) \
)

#define GET_Message10_Signal_12_Bit_Unsigned_M_Factor(buf) \
   CAN_TO_REAL_Message10_Signal_12_Bit_Unsigned_M_Factor(GET_Message10_Signal_12_Bit_Unsigned_M_Factor_Raw(buf))

/**
 * \section Message Message9
 */
/**
 * \brief ID of message 'Message9'
 */
#define ID_Message9 0x9

/**
 * \brief Is ID of message 'Message9' extended?
 */
#define EXT_Message9 false

/**
 * \brief DLC of message 'Message9'
 */
#define DLC_Message9 8

/**
 * \brief SETTERs for message 'Message9'
 * - SET_Message9_Signal_12_Bit_Unsigned_M(buf, value)
 * - SET_Message9_Signal_12_Bit_Signed_I(buf, value)
 * - SET_Message9_Signal_12_Bit_Signed_M(buf, value)
 * - SET_Message9_Signal_12_Bit_Unsigned_I(buf, value)
 */

/**
 * \brief GETTERs for message 'Message9'
 * - GET_Message9_Signal_12_Bit_Unsigned_M(buf)
 * - GET_Message9_Signal_12_Bit_Signed_I(buf)
 * - GET_Message9_Signal_12_Bit_Signed_M(buf)
 * - GET_Message9_Signal_12_Bit_Unsigned_I(buf)
 */

/**
 * \subsection Signal Signal_12_Bit_Unsigned_M
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message9_Signal_12_Bit_Unsigned_M   ""
#define OFFSET_Message9_Signal_12_Bit_Unsigned_M 0
#define FACTOR_Message9_Signal_12_Bit_Unsigned_M 1
#define MIN_Message9_Signal_12_Bit_Unsigned_M    0
#define MAX_Message9_Signal_12_Bit_Unsigned_M    0

#define CAN_TO_REAL_Message9_Signal_12_Bit_Unsigned_M(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message9_Signal_12_Bit_Unsigned_M(x) (uint16_t)(((x) - 0) / 1)

#define SET_Message9_Signal_12_Bit_Unsigned_M_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0x7F << 0);\
   buf[0] |=  (uint8_t)(((val) >>  5) & 0x7F) << 0;\
   buf[1] &= ~(uint8_t)(0x1F << 3);\
   buf[1] |=  (uint8_t)(((val) >>  0) & 0x1F) << 3;\
}

#define SET_Message9_Signal_12_Bit_Unsigned_M(buf,val) \
   SET_Message9_Signal_12_Bit_Unsigned_M_Raw(buf,REAL_TO_CAN_Message9_Signal_12_Bit_Unsigned_M(val))

#define GET_Message9_Signal_12_Bit_Unsigned_M_Raw(buf) (uint16_t) (0\
   | ((+(uint16_t)(buf[0] >> 0) & 0x7F) << 5) \
   | ((+(uint16_t)(buf[1] >> 3) & 0x1F) << 0) \
)

#define GET_Message9_Signal_12_Bit_Unsigned_M(buf) \
   CAN_TO_REAL_Message9_Signal_12_Bit_Unsigned_M(GET_Message9_Signal_12_Bit_Unsigned_M_Raw(buf))

/**
 * \subsection Signal Signal_12_Bit_Signed_I
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message9_Signal_12_Bit_Signed_I   ""
#define OFFSET_Message9_Signal_12_Bit_Signed_I 0
#define FACTOR_Message9_Signal_12_Bit_Signed_I 1
#define MIN_Message9_Signal_12_Bit_Signed_I    0
#define MAX_Message9_Signal_12_Bit_Signed_I    0

#define CAN_TO_REAL_Message9_Signal_12_Bit_Signed_I(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message9_Signal_12_Bit_Signed_I(x) (int16_t)(((x) - 0) / 1)

#define SET_Message9_Signal_12_Bit_Signed_I_Raw(buf,val) {\
   buf[2] &= ~(uint8_t)(0x7F << 1);\
   buf[2] |=  (uint8_t)(((val) >>  0) & 0x7F) << 1;\
   buf[3] &= ~(uint8_t)(0x1F << 0);\
   buf[3] |=  (uint8_t)(((val) >>  7) & 0x1F) << 0;\
}

#define SET_Message9_Signal_12_Bit_Signed_I(buf,val) \
   SET_Message9_Signal_12_Bit_Signed_I_Raw(buf,REAL_TO_CAN_Message9_Signal_12_Bit_Signed_I(val))

#define GET_Message9_Signal_12_Bit_Signed_I_Raw(buf) (int16_t) (0\
   | ((+(uint16_t)(buf[2] >> 1) & 0x7F) << 0) \
   | ((+(uint16_t)(buf[3] >> 0) & 0x1F) << 7) \
)

// Necessary for singed signals with length that is not 1, 8, 16, 32 or 64 bits.
#define SIGNED_Message9_Signal_12_Bit_Signed_I(val) \
   ((((val)&0x800)>0) ? ((int16_t)((val)|0xF000)) : ((int16_t)(val)))

#define GET_Message9_Signal_12_Bit_Signed_I(buf) \
   CAN_TO_REAL_Message9_Signal_12_Bit_Signed_I(SIGNED_Message9_Signal_12_Bit_Signed_I(GET_Message9_Signal_12_Bit_Signed_I_Raw(buf)))

/**
 * \subsection Signal Signal_12_Bit_Signed_M
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message9_Signal_12_Bit_Signed_M   ""
#define OFFSET_Message9_Signal_12_Bit_Signed_M 0
#define FACTOR_Message9_Signal_12_Bit_Signed_M 1
#define MIN_Message9_Signal_12_Bit_Signed_M    0
#define MAX_Message9_Signal_12_Bit_Signed_M    0

#define CAN_TO_REAL_Message9_Signal_12_Bit_Signed_M(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message9_Signal_12_Bit_Signed_M(x) (int16_t)(((x) - 0) / 1)

#define SET_Message9_Signal_12_Bit_Signed_M_Raw(buf,val) {\
   buf[4] &= ~(uint8_t)(0x7F << 0);\
   buf[4] |=  (uint8_t)(((val) >>  5) & 0x7F) << 0;\
   buf[5] &= ~(uint8_t)(0x1F << 3);\
   buf[5] |=  (uint8_t)(((val) >>  0) & 0x1F) << 3;\
}

#define SET_Message9_Signal_12_Bit_Signed_M(buf,val) \
   SET_Message9_Signal_12_Bit_Signed_M_Raw(buf,REAL_TO_CAN_Message9_Signal_12_Bit_Signed_M(val))

#define GET_Message9_Signal_12_Bit_Signed_M_Raw(buf) (int16_t) (0\
   | ((+(uint16_t)(buf[4] >> 0) & 0x7F) << 5) \
   | ((+(uint16_t)(buf[5] >> 3) & 0x1F) << 0) \
)

// Necessary for singed signals with length that is not 1, 8, 16, 32 or 64 bits.
#define SIGNED_Message9_Signal_12_Bit_Signed_M(val) \
   ((((val)&0x800)>0) ? ((int16_t)((val)|0xF000)) : ((int16_t)(val)))

#define GET_Message9_Signal_12_Bit_Signed_M(buf) \
   CAN_TO_REAL_Message9_Signal_12_Bit_Signed_M(SIGNED_Message9_Signal_12_Bit_Signed_M(GET_Message9_Signal_12_Bit_Signed_M_Raw(buf)))

/**
 * \subsection Signal Signal_12_Bit_Unsigned_I
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message9_Signal_12_Bit_Unsigned_I   ""
#define OFFSET_Message9_Signal_12_Bit_Unsigned_I 0
#define FACTOR_Message9_Signal_12_Bit_Unsigned_I 1
#define MIN_Message9_Signal_12_Bit_Unsigned_I    0
#define MAX_Message9_Signal_12_Bit_Unsigned_I    0

#define CAN_TO_REAL_Message9_Signal_12_Bit_Unsigned_I(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message9_Signal_12_Bit_Unsigned_I(x) (uint16_t)(((x) - 0) / 1)

#define SET_Message9_Signal_12_Bit_Unsigned_I_Raw(buf,val) {\
   buf[6] &= ~(uint8_t)(0xFF << 0);\
   buf[6] |=  (uint8_t)(((val) >>  0) & 0xFF) << 0;\
   buf[7] &= ~(uint8_t)(0x0F << 0);\
   buf[7] |=  (uint8_t)(((val) >>  8) & 0x0F) << 0;\
}

#define SET_Message9_Signal_12_Bit_Unsigned_I(buf,val) \
   SET_Message9_Signal_12_Bit_Unsigned_I_Raw(buf,REAL_TO_CAN_Message9_Signal_12_Bit_Unsigned_I(val))

#define GET_Message9_Signal_12_Bit_Unsigned_I_Raw(buf) (uint16_t) (0\
   | ((+(uint16_t)(buf[6] >> 0) & 0xFF) << 0) \
   | ((+(uint16_t)(buf[7] >> 0) & 0x0F) << 8) \
)

#define GET_Message9_Signal_12_Bit_Unsigned_I(buf) \
   CAN_TO_REAL_Message9_Signal_12_Bit_Unsigned_I(GET_Message9_Signal_12_Bit_Unsigned_I_Raw(buf))

/**
 * \section Message Message8
 */
/**
 * \brief ID of message 'Message8'
 */
#define ID_Message8 0x8

/**
 * \brief Is ID of message 'Message8' extended?
 */
#define EXT_Message8 false

/**
 * \brief DLC of message 'Message8'
 */
#define DLC_Message8 8

/**
 * \brief SETTERs for message 'Message8'
 * - SET_Message8_Signal_64_Bit_Unsigned_I(buf, value)
 */

/**
 * \brief GETTERs for message 'Message8'
 * - GET_Message8_Signal_64_Bit_Unsigned_I(buf)
 */

/**
 * \subsection Signal Signal_64_Bit_Unsigned_I
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message8_Signal_64_Bit_Unsigned_I   ""
#define OFFSET_Message8_Signal_64_Bit_Unsigned_I 0
#define FACTOR_Message8_Signal_64_Bit_Unsigned_I 1
#define MIN_Message8_Signal_64_Bit_Unsigned_I    0
#define MAX_Message8_Signal_64_Bit_Unsigned_I    0

#define CAN_TO_REAL_Message8_Signal_64_Bit_Unsigned_I(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message8_Signal_64_Bit_Unsigned_I(x) (uint64_t)(((x) - 0) / 1)

#define SET_Message8_Signal_64_Bit_Unsigned_I_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0xFF << 0);\
   buf[0] |=  (uint8_t)(((val) >>  0) & 0xFF) << 0;\
   buf[1] &= ~(uint8_t)(0xFF << 0);\
   buf[1] |=  (uint8_t)(((val) >>  8) & 0xFF) << 0;\
   buf[2] &= ~(uint8_t)(0xFF << 0);\
   buf[2] |=  (uint8_t)(((val) >> 16) & 0xFF) << 0;\
   buf[3] &= ~(uint8_t)(0xFF << 0);\
   buf[3] |=  (uint8_t)(((val) >> 24) & 0xFF) << 0;\
   buf[4] &= ~(uint8_t)(0xFF << 0);\
   buf[4] |=  (uint8_t)(((val) >> 32) & 0xFF) << 0;\
   buf[5] &= ~(uint8_t)(0xFF << 0);\
   buf[5] |=  (uint8_t)(((val) >> 40) & 0xFF) << 0;\
   buf[6] &= ~(uint8_t)(0xFF << 0);\
   buf[6] |=  (uint8_t)(((val) >> 48) & 0xFF) << 0;\
   buf[7] &= ~(uint8_t)(0xFF << 0);\
   buf[7] |=  (uint8_t)(((val) >> 56) & 0xFF) << 0;\
}

#define SET_Message8_Signal_64_Bit_Unsigned_I(buf,val) \
   SET_Message8_Signal_64_Bit_Unsigned_I_Raw(buf,REAL_TO_CAN_Message8_Signal_64_Bit_Unsigned_I(val))

#define GET_Message8_Signal_64_Bit_Unsigned_I_Raw(buf) (uint64_t) (0\
   | ((+(uint64_t)(buf[0] >> 0) & 0xFF) << 0) \
   | ((+(uint64_t)(buf[1] >> 0) & 0xFF) << 8) \
   | ((+(uint64_t)(buf[2] >> 0) & 0xFF) << 16) \
   | ((+(uint64_t)(buf[3] >> 0) & 0xFF) << 24) \
   | ((+(uint64_t)(buf[4] >> 0) & 0xFF) << 32) \
   | ((+(uint64_t)(buf[5] >> 0) & 0xFF) << 40) \
   | ((+(uint64_t)(buf[6] >> 0) & 0xFF) << 48) \
   | ((+(uint64_t)(buf[7] >> 0) & 0xFF) << 56) \
)

#define GET_Message8_Signal_64_Bit_Unsigned_I(buf) \
   CAN_TO_REAL_Message8_Signal_64_Bit_Unsigned_I(GET_Message8_Signal_64_Bit_Unsigned_I_Raw(buf))

/**
 * \section Message Message7
 */
/**
 * \brief ID of message 'Message7'
 */
#define ID_Message7 0x7

/**
 * \brief Is ID of message 'Message7' extended?
 */
#define EXT_Message7 false

/**
 * \brief DLC of message 'Message7'
 */
#define DLC_Message7 8

/**
 * \brief SETTERs for message 'Message7'
 * - SET_Message7_Signal_8_Bit_Unsigned_I(buf, value)
 * - SET_Message7_Signal_16_Bit_Unsigned_I(buf, value)
 * - SET_Message7_Signal_32_Bit_Unsigned_I(buf, value)
 */

/**
 * \brief GETTERs for message 'Message7'
 * - GET_Message7_Signal_8_Bit_Unsigned_I(buf)
 * - GET_Message7_Signal_16_Bit_Unsigned_I(buf)
 * - GET_Message7_Signal_32_Bit_Unsigned_I(buf)
 */

/**
 * \subsection Signal Signal_8_Bit_Unsigned_I
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message7_Signal_8_Bit_Unsigned_I   ""
#define OFFSET_Message7_Signal_8_Bit_Unsigned_I 0
#define FACTOR_Message7_Signal_8_Bit_Unsigned_I 1
#define MIN_Message7_Signal_8_Bit_Unsigned_I    0
#define MAX_Message7_Signal_8_Bit_Unsigned_I    0

#define CAN_TO_REAL_Message7_Signal_8_Bit_Unsigned_I(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message7_Signal_8_Bit_Unsigned_I(x) (uint8_t)(((x) - 0) / 1)

#define SET_Message7_Signal_8_Bit_Unsigned_I_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0x3F << 2);\
   buf[0] |=  (uint8_t)(((val) >>  0) & 0x3F) << 2;\
   buf[1] &= ~(uint8_t)(0x03 << 0);\
   buf[1] |=  (uint8_t)(((val) >>  6) & 0x03) << 0;\
}

#define SET_Message7_Signal_8_Bit_Unsigned_I(buf,val) \
   SET_Message7_Signal_8_Bit_Unsigned_I_Raw(buf,REAL_TO_CAN_Message7_Signal_8_Bit_Unsigned_I(val))

#define GET_Message7_Signal_8_Bit_Unsigned_I_Raw(buf) (uint8_t) (0\
   | ((+(uint8_t)(buf[0] >> 2) & 0x3F) << 0) \
   | ((+(uint8_t)(buf[1] >> 0) & 0x03) << 6) \
)

#define GET_Message7_Signal_8_Bit_Unsigned_I(buf) \
   CAN_TO_REAL_Message7_Signal_8_Bit_Unsigned_I(GET_Message7_Signal_8_Bit_Unsigned_I_Raw(buf))

/**
 * \subsection Signal Signal_16_Bit_Unsigned_I
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message7_Signal_16_Bit_Unsigned_I   ""
#define OFFSET_Message7_Signal_16_Bit_Unsigned_I 0
#define FACTOR_Message7_Signal_16_Bit_Unsigned_I 1
#define MIN_Message7_Signal_16_Bit_Unsigned_I    0
#define MAX_Message7_Signal_16_Bit_Unsigned_I    0

#define CAN_TO_REAL_Message7_Signal_16_Bit_Unsigned_I(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message7_Signal_16_Bit_Unsigned_I(x) (uint16_t)(((x) - 0) / 1)

#define SET_Message7_Signal_16_Bit_Unsigned_I_Raw(buf,val) {\
   buf[1] &= ~(uint8_t)(0x0F << 4);\
   buf[1] |=  (uint8_t)(((val) >>  0) & 0x0F) << 4;\
   buf[2] &= ~(uint8_t)(0xFF << 0);\
   buf[2] |=  (uint8_t)(((val) >>  4) & 0xFF) << 0;\
   buf[3] &= ~(uint8_t)(0x0F << 0);\
   buf[3] |=  (uint8_t)(((val) >> 12) & 0x0F) << 0;\
}

#define SET_Message7_Signal_16_Bit_Unsigned_I(buf,val) \
   SET_Message7_Signal_16_Bit_Unsigned_I_Raw(buf,REAL_TO_CAN_Message7_Signal_16_Bit_Unsigned_I(val))

#define GET_Message7_Signal_16_Bit_Unsigned_I_Raw(buf) (uint16_t) (0\
   | ((+(uint16_t)(buf[1] >> 4) & 0x0F) << 0) \
   | ((+(uint16_t)(buf[2] >> 0) & 0xFF) << 4) \
   | ((+(uint16_t)(buf[3] >> 0) & 0x0F) << 12) \
)

#define GET_Message7_Signal_16_Bit_Unsigned_I(buf) \
   CAN_TO_REAL_Message7_Signal_16_Bit_Unsigned_I(GET_Message7_Signal_16_Bit_Unsigned_I_Raw(buf))

/**
 * \subsection Signal Signal_32_Bit_Unsigned_I
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message7_Signal_32_Bit_Unsigned_I   ""
#define OFFSET_Message7_Signal_32_Bit_Unsigned_I 0
#define FACTOR_Message7_Signal_32_Bit_Unsigned_I 1
#define MIN_Message7_Signal_32_Bit_Unsigned_I    0
#define MAX_Message7_Signal_32_Bit_Unsigned_I    0

#define CAN_TO_REAL_Message7_Signal_32_Bit_Unsigned_I(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message7_Signal_32_Bit_Unsigned_I(x) (uint32_t)(((x) - 0) / 1)

#define SET_Message7_Signal_32_Bit_Unsigned_I_Raw(buf,val) {\
   buf[3] &= ~(uint8_t)(0x03 << 6);\
   buf[3] |=  (uint8_t)(((val) >>  0) & 0x03) << 6;\
   buf[4] &= ~(uint8_t)(0xFF << 0);\
   buf[4] |=  (uint8_t)(((val) >>  2) & 0xFF) << 0;\
   buf[5] &= ~(uint8_t)(0xFF << 0);\
   buf[5] |=  (uint8_t)(((val) >> 10) & 0xFF) << 0;\
   buf[6] &= ~(uint8_t)(0xFF << 0);\
   buf[6] |=  (uint8_t)(((val) >> 18) & 0xFF) << 0;\
   buf[7] &= ~(uint8_t)(0x3F << 0);\
   buf[7] |=  (uint8_t)(((val) >> 26) & 0x3F) << 0;\
}

#define SET_Message7_Signal_32_Bit_Unsigned_I(buf,val) \
   SET_Message7_Signal_32_Bit_Unsigned_I_Raw(buf,REAL_TO_CAN_Message7_Signal_32_Bit_Unsigned_I(val))

#define GET_Message7_Signal_32_Bit_Unsigned_I_Raw(buf) (uint32_t) (0\
   | ((+(uint32_t)(buf[3] >> 6) & 0x03) << 0) \
   | ((+(uint32_t)(buf[4] >> 0) & 0xFF) << 2) \
   | ((+(uint32_t)(buf[5] >> 0) & 0xFF) << 10) \
   | ((+(uint32_t)(buf[6] >> 0) & 0xFF) << 18) \
   | ((+(uint32_t)(buf[7] >> 0) & 0x3F) << 26) \
)

#define GET_Message7_Signal_32_Bit_Unsigned_I(buf) \
   CAN_TO_REAL_Message7_Signal_32_Bit_Unsigned_I(GET_Message7_Signal_32_Bit_Unsigned_I_Raw(buf))

/**
 * \section Message Message6
 */
/**
 * \brief ID of message 'Message6'
 */
#define ID_Message6 0x6

/**
 * \brief Is ID of message 'Message6' extended?
 */
#define EXT_Message6 false

/**
 * \brief DLC of message 'Message6'
 */
#define DLC_Message6 8

/**
 * \brief SETTERs for message 'Message6'
 * - SET_Message6_Signal_64_Bit_Signed_I(buf, value)
 */

/**
 * \brief GETTERs for message 'Message6'
 * - GET_Message6_Signal_64_Bit_Signed_I(buf)
 */

/**
 * \subsection Signal Signal_64_Bit_Signed_I
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message6_Signal_64_Bit_Signed_I   ""
#define OFFSET_Message6_Signal_64_Bit_Signed_I 0
#define FACTOR_Message6_Signal_64_Bit_Signed_I 1
#define MIN_Message6_Signal_64_Bit_Signed_I    0
#define MAX_Message6_Signal_64_Bit_Signed_I    0

#define CAN_TO_REAL_Message6_Signal_64_Bit_Signed_I(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message6_Signal_64_Bit_Signed_I(x) (int64_t)(((x) - 0) / 1)

#define SET_Message6_Signal_64_Bit_Signed_I_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0xFF << 0);\
   buf[0] |=  (uint8_t)(((val) >>  0) & 0xFF) << 0;\
   buf[1] &= ~(uint8_t)(0xFF << 0);\
   buf[1] |=  (uint8_t)(((val) >>  8) & 0xFF) << 0;\
   buf[2] &= ~(uint8_t)(0xFF << 0);\
   buf[2] |=  (uint8_t)(((val) >> 16) & 0xFF) << 0;\
   buf[3] &= ~(uint8_t)(0xFF << 0);\
   buf[3] |=  (uint8_t)(((val) >> 24) & 0xFF) << 0;\
   buf[4] &= ~(uint8_t)(0xFF << 0);\
   buf[4] |=  (uint8_t)(((val) >> 32) & 0xFF) << 0;\
   buf[5] &= ~(uint8_t)(0xFF << 0);\
   buf[5] |=  (uint8_t)(((val) >> 40) & 0xFF) << 0;\
   buf[6] &= ~(uint8_t)(0xFF << 0);\
   buf[6] |=  (uint8_t)(((val) >> 48) & 0xFF) << 0;\
   buf[7] &= ~(uint8_t)(0xFF << 0);\
   buf[7] |=  (uint8_t)(((val) >> 56) & 0xFF) << 0;\
}

#define SET_Message6_Signal_64_Bit_Signed_I(buf,val) \
   SET_Message6_Signal_64_Bit_Signed_I_Raw(buf,REAL_TO_CAN_Message6_Signal_64_Bit_Signed_I(val))

#define GET_Message6_Signal_64_Bit_Signed_I_Raw(buf) (int64_t) (0\
   | ((+(uint64_t)(buf[0] >> 0) & 0xFF) << 0) \
   | ((+(uint64_t)(buf[1] >> 0) & 0xFF) << 8) \
   | ((+(uint64_t)(buf[2] >> 0) & 0xFF) << 16) \
   | ((+(uint64_t)(buf[3] >> 0) & 0xFF) << 24) \
   | ((+(uint64_t)(buf[4] >> 0) & 0xFF) << 32) \
   | ((+(uint64_t)(buf[5] >> 0) & 0xFF) << 40) \
   | ((+(uint64_t)(buf[6] >> 0) & 0xFF) << 48) \
   | ((+(uint64_t)(buf[7] >> 0) & 0xFF) << 56) \
)

#define GET_Message6_Signal_64_Bit_Signed_I(buf) \
   CAN_TO_REAL_Message6_Signal_64_Bit_Signed_I(GET_Message6_Signal_64_Bit_Signed_I_Raw(buf))

/**
 * \section Message Message5
 */
/**
 * \brief ID of message 'Message5'
 */
#define ID_Message5 0x5

/**
 * \brief Is ID of message 'Message5' extended?
 */
#define EXT_Message5 false

/**
 * \brief DLC of message 'Message5'
 */
#define DLC_Message5 8

/**
 * \brief SETTERs for message 'Message5'
 * - SET_Message5_Signal_8_Bit_Signed_I(buf, value)
 * - SET_Message5_Signal_16_Bit_Signed_I(buf, value)
 * - SET_Message5_Signal_32_Bit_Signed_I(buf, value)
 */

/**
 * \brief GETTERs for message 'Message5'
 * - GET_Message5_Signal_8_Bit_Signed_I(buf)
 * - GET_Message5_Signal_16_Bit_Signed_I(buf)
 * - GET_Message5_Signal_32_Bit_Signed_I(buf)
 */

/**
 * \subsection Signal Signal_8_Bit_Signed_I
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message5_Signal_8_Bit_Signed_I   "km/h"
#define OFFSET_Message5_Signal_8_Bit_Signed_I 0
#define FACTOR_Message5_Signal_8_Bit_Signed_I 1
#define MIN_Message5_Signal_8_Bit_Signed_I    0
#define MAX_Message5_Signal_8_Bit_Signed_I    0

#define CAN_TO_REAL_Message5_Signal_8_Bit_Signed_I(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message5_Signal_8_Bit_Signed_I(x) (int8_t)(((x) - 0) / 1)

#define SET_Message5_Signal_8_Bit_Signed_I_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0x3F << 2);\
   buf[0] |=  (uint8_t)(((val) >>  0) & 0x3F) << 2;\
   buf[1] &= ~(uint8_t)(0x03 << 0);\
   buf[1] |=  (uint8_t)(((val) >>  6) & 0x03) << 0;\
}

#define SET_Message5_Signal_8_Bit_Signed_I(buf,val) \
   SET_Message5_Signal_8_Bit_Signed_I_Raw(buf,REAL_TO_CAN_Message5_Signal_8_Bit_Signed_I(val))

#define GET_Message5_Signal_8_Bit_Signed_I_Raw(buf) (int8_t) (0\
   | ((+(uint8_t)(buf[0] >> 2) & 0x3F) << 0) \
   | ((+(uint8_t)(buf[1] >> 0) & 0x03) << 6) \
)

#define GET_Message5_Signal_8_Bit_Signed_I(buf) \
   CAN_TO_REAL_Message5_Signal_8_Bit_Signed_I(GET_Message5_Signal_8_Bit_Signed_I_Raw(buf))

/**
 * \subsection Signal Signal_16_Bit_Signed_I
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message5_Signal_16_Bit_Signed_I   ""
#define OFFSET_Message5_Signal_16_Bit_Signed_I 0
#define FACTOR_Message5_Signal_16_Bit_Signed_I 1
#define MIN_Message5_Signal_16_Bit_Signed_I    0
#define MAX_Message5_Signal_16_Bit_Signed_I    0

#define CAN_TO_REAL_Message5_Signal_16_Bit_Signed_I(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message5_Signal_16_Bit_Signed_I(x) (int16_t)(((x) - 0) / 1)

#define SET_Message5_Signal_16_Bit_Signed_I_Raw(buf,val) {\
   buf[1] &= ~(uint8_t)(0x0F << 4);\
   buf[1] |=  (uint8_t)(((val) >>  0) & 0x0F) << 4;\
   buf[2] &= ~(uint8_t)(0xFF << 0);\
   buf[2] |=  (uint8_t)(((val) >>  4) & 0xFF) << 0;\
   buf[3] &= ~(uint8_t)(0x0F << 0);\
   buf[3] |=  (uint8_t)(((val) >> 12) & 0x0F) << 0;\
}

#define SET_Message5_Signal_16_Bit_Signed_I(buf,val) \
   SET_Message5_Signal_16_Bit_Signed_I_Raw(buf,REAL_TO_CAN_Message5_Signal_16_Bit_Signed_I(val))

#define GET_Message5_Signal_16_Bit_Signed_I_Raw(buf) (int16_t) (0\
   | ((+(uint16_t)(buf[1] >> 4) & 0x0F) << 0) \
   | ((+(uint16_t)(buf[2] >> 0) & 0xFF) << 4) \
   | ((+(uint16_t)(buf[3] >> 0) & 0x0F) << 12) \
)

#define GET_Message5_Signal_16_Bit_Signed_I(buf) \
   CAN_TO_REAL_Message5_Signal_16_Bit_Signed_I(GET_Message5_Signal_16_Bit_Signed_I_Raw(buf))

/**
 * \subsection Signal Signal_32_Bit_Signed_I
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message5_Signal_32_Bit_Signed_I   ""
#define OFFSET_Message5_Signal_32_Bit_Signed_I 0
#define FACTOR_Message5_Signal_32_Bit_Signed_I 1
#define MIN_Message5_Signal_32_Bit_Signed_I    0
#define MAX_Message5_Signal_32_Bit_Signed_I    0

#define CAN_TO_REAL_Message5_Signal_32_Bit_Signed_I(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message5_Signal_32_Bit_Signed_I(x) (int32_t)(((x) - 0) / 1)

#define SET_Message5_Signal_32_Bit_Signed_I_Raw(buf,val) {\
   buf[3] &= ~(uint8_t)(0x03 << 6);\
   buf[3] |=  (uint8_t)(((val) >>  0) & 0x03) << 6;\
   buf[4] &= ~(uint8_t)(0xFF << 0);\
   buf[4] |=  (uint8_t)(((val) >>  2) & 0xFF) << 0;\
   buf[5] &= ~(uint8_t)(0xFF << 0);\
   buf[5] |=  (uint8_t)(((val) >> 10) & 0xFF) << 0;\
   buf[6] &= ~(uint8_t)(0xFF << 0);\
   buf[6] |=  (uint8_t)(((val) >> 18) & 0xFF) << 0;\
   buf[7] &= ~(uint8_t)(0x3F << 0);\
   buf[7] |=  (uint8_t)(((val) >> 26) & 0x3F) << 0;\
}

#define SET_Message5_Signal_32_Bit_Signed_I(buf,val) \
   SET_Message5_Signal_32_Bit_Signed_I_Raw(buf,REAL_TO_CAN_Message5_Signal_32_Bit_Signed_I(val))

#define GET_Message5_Signal_32_Bit_Signed_I_Raw(buf) (int32_t) (0\
   | ((+(uint32_t)(buf[3] >> 6) & 0x03) << 0) \
   | ((+(uint32_t)(buf[4] >> 0) & 0xFF) << 2) \
   | ((+(uint32_t)(buf[5] >> 0) & 0xFF) << 10) \
   | ((+(uint32_t)(buf[6] >> 0) & 0xFF) << 18) \
   | ((+(uint32_t)(buf[7] >> 0) & 0x3F) << 26) \
)

#define GET_Message5_Signal_32_Bit_Signed_I(buf) \
   CAN_TO_REAL_Message5_Signal_32_Bit_Signed_I(GET_Message5_Signal_32_Bit_Signed_I_Raw(buf))

/**
 * \section Message Message4
 */
/**
 * \brief ID of message 'Message4'
 */
#define ID_Message4 0x4

/**
 * \brief Is ID of message 'Message4' extended?
 */
#define EXT_Message4 false

/**
 * \brief DLC of message 'Message4'
 */
#define DLC_Message4 8

/**
 * \brief SETTERs for message 'Message4'
 * - SET_Message4_Signal_64_Bit_Unsigned_M(buf, value)
 */

/**
 * \brief GETTERs for message 'Message4'
 * - GET_Message4_Signal_64_Bit_Unsigned_M(buf)
 */

/**
 * \subsection Signal Signal_64_Bit_Unsigned_M
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message4_Signal_64_Bit_Unsigned_M   ""
#define OFFSET_Message4_Signal_64_Bit_Unsigned_M 0
#define FACTOR_Message4_Signal_64_Bit_Unsigned_M 1
#define MIN_Message4_Signal_64_Bit_Unsigned_M    0
#define MAX_Message4_Signal_64_Bit_Unsigned_M    0

#define CAN_TO_REAL_Message4_Signal_64_Bit_Unsigned_M(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message4_Signal_64_Bit_Unsigned_M(x) (uint64_t)(((x) - 0) / 1)

#define SET_Message4_Signal_64_Bit_Unsigned_M_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0xFF << 0);\
   buf[0] |=  (uint8_t)(((val) >> 56) & 0xFF) << 0;\
   buf[1] &= ~(uint8_t)(0xFF << 0);\
   buf[1] |=  (uint8_t)(((val) >> 48) & 0xFF) << 0;\
   buf[2] &= ~(uint8_t)(0xFF << 0);\
   buf[2] |=  (uint8_t)(((val) >> 40) & 0xFF) << 0;\
   buf[3] &= ~(uint8_t)(0xFF << 0);\
   buf[3] |=  (uint8_t)(((val) >> 32) & 0xFF) << 0;\
   buf[4] &= ~(uint8_t)(0xFF << 0);\
   buf[4] |=  (uint8_t)(((val) >> 24) & 0xFF) << 0;\
   buf[5] &= ~(uint8_t)(0xFF << 0);\
   buf[5] |=  (uint8_t)(((val) >> 16) & 0xFF) << 0;\
   buf[6] &= ~(uint8_t)(0xFF << 0);\
   buf[6] |=  (uint8_t)(((val) >>  8) & 0xFF) << 0;\
   buf[7] &= ~(uint8_t)(0xFF << 0);\
   buf[7] |=  (uint8_t)(((val) >>  0) & 0xFF) << 0;\
}

#define SET_Message4_Signal_64_Bit_Unsigned_M(buf,val) \
   SET_Message4_Signal_64_Bit_Unsigned_M_Raw(buf,REAL_TO_CAN_Message4_Signal_64_Bit_Unsigned_M(val))

#define GET_Message4_Signal_64_Bit_Unsigned_M_Raw(buf) (uint64_t) (0\
   | ((+(uint64_t)(buf[0] >> 0) & 0xFF) << 56) \
   | ((+(uint64_t)(buf[1] >> 0) & 0xFF) << 48) \
   | ((+(uint64_t)(buf[2] >> 0) & 0xFF) << 40) \
   | ((+(uint64_t)(buf[3] >> 0) & 0xFF) << 32) \
   | ((+(uint64_t)(buf[4] >> 0) & 0xFF) << 24) \
   | ((+(uint64_t)(buf[5] >> 0) & 0xFF) << 16) \
   | ((+(uint64_t)(buf[6] >> 0) & 0xFF) << 8) \
   | ((+(uint64_t)(buf[7] >> 0) & 0xFF) << 0) \
)

#define GET_Message4_Signal_64_Bit_Unsigned_M(buf) \
   CAN_TO_REAL_Message4_Signal_64_Bit_Unsigned_M(GET_Message4_Signal_64_Bit_Unsigned_M_Raw(buf))

/**
 * \section Message Message3
 */
/**
 * \brief ID of message 'Message3'
 */
#define ID_Message3 0x3

/**
 * \brief Is ID of message 'Message3' extended?
 */
#define EXT_Message3 false

/**
 * \brief DLC of message 'Message3'
 */
#define DLC_Message3 8

/**
 * \brief SETTERs for message 'Message3'
 * - SET_Message3_Signal_8_Bit_Unsigned_M(buf, value)
 * - SET_Message3_Signal_16_Bit_Unsigned_M(buf, value)
 * - SET_Message3_Signal_32_Bit_Unsigned_M(buf, value)
 */

/**
 * \brief GETTERs for message 'Message3'
 * - GET_Message3_Signal_8_Bit_Unsigned_M(buf)
 * - GET_Message3_Signal_16_Bit_Unsigned_M(buf)
 * - GET_Message3_Signal_32_Bit_Unsigned_M(buf)
 */

/**
 * \subsection Signal Signal_8_Bit_Unsigned_M
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message3_Signal_8_Bit_Unsigned_M   ""
#define OFFSET_Message3_Signal_8_Bit_Unsigned_M 0
#define FACTOR_Message3_Signal_8_Bit_Unsigned_M 1
#define MIN_Message3_Signal_8_Bit_Unsigned_M    0
#define MAX_Message3_Signal_8_Bit_Unsigned_M    0

#define CAN_TO_REAL_Message3_Signal_8_Bit_Unsigned_M(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message3_Signal_8_Bit_Unsigned_M(x) (uint8_t)(((x) - 0) / 1)

#define SET_Message3_Signal_8_Bit_Unsigned_M_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0x3F << 0);\
   buf[0] |=  (uint8_t)(((val) >>  2) & 0x3F) << 0;\
   buf[1] &= ~(uint8_t)(0x03 << 6);\
   buf[1] |=  (uint8_t)(((val) >>  0) & 0x03) << 6;\
}

#define SET_Message3_Signal_8_Bit_Unsigned_M(buf,val) \
   SET_Message3_Signal_8_Bit_Unsigned_M_Raw(buf,REAL_TO_CAN_Message3_Signal_8_Bit_Unsigned_M(val))

#define GET_Message3_Signal_8_Bit_Unsigned_M_Raw(buf) (uint8_t) (0\
   | ((+(uint8_t)(buf[0] >> 0) & 0x3F) << 2) \
   | ((+(uint8_t)(buf[1] >> 6) & 0x03) << 0) \
)

#define GET_Message3_Signal_8_Bit_Unsigned_M(buf) \
   CAN_TO_REAL_Message3_Signal_8_Bit_Unsigned_M(GET_Message3_Signal_8_Bit_Unsigned_M_Raw(buf))

/**
 * \subsection Signal Signal_16_Bit_Unsigned_M
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message3_Signal_16_Bit_Unsigned_M   ""
#define OFFSET_Message3_Signal_16_Bit_Unsigned_M 0
#define FACTOR_Message3_Signal_16_Bit_Unsigned_M 1
#define MIN_Message3_Signal_16_Bit_Unsigned_M    0
#define MAX_Message3_Signal_16_Bit_Unsigned_M    0

#define CAN_TO_REAL_Message3_Signal_16_Bit_Unsigned_M(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message3_Signal_16_Bit_Unsigned_M(x) (uint16_t)(((x) - 0) / 1)

#define SET_Message3_Signal_16_Bit_Unsigned_M_Raw(buf,val) {\
   buf[1] &= ~(uint8_t)(0x0F << 0);\
   buf[1] |=  (uint8_t)(((val) >> 12) & 0x0F) << 0;\
   buf[2] &= ~(uint8_t)(0xFF << 0);\
   buf[2] |=  (uint8_t)(((val) >>  4) & 0xFF) << 0;\
   buf[3] &= ~(uint8_t)(0x0F << 4);\
   buf[3] |=  (uint8_t)(((val) >>  0) & 0x0F) << 4;\
}

#define SET_Message3_Signal_16_Bit_Unsigned_M(buf,val) \
   SET_Message3_Signal_16_Bit_Unsigned_M_Raw(buf,REAL_TO_CAN_Message3_Signal_16_Bit_Unsigned_M(val))

#define GET_Message3_Signal_16_Bit_Unsigned_M_Raw(buf) (uint16_t) (0\
   | ((+(uint16_t)(buf[1] >> 0) & 0x0F) << 12) \
   | ((+(uint16_t)(buf[2] >> 0) & 0xFF) << 4) \
   | ((+(uint16_t)(buf[3] >> 4) & 0x0F) << 0) \
)

#define GET_Message3_Signal_16_Bit_Unsigned_M(buf) \
   CAN_TO_REAL_Message3_Signal_16_Bit_Unsigned_M(GET_Message3_Signal_16_Bit_Unsigned_M_Raw(buf))

/**
 * \subsection Signal Signal_32_Bit_Unsigned_M
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message3_Signal_32_Bit_Unsigned_M   ""
#define OFFSET_Message3_Signal_32_Bit_Unsigned_M 0
#define FACTOR_Message3_Signal_32_Bit_Unsigned_M 1
#define MIN_Message3_Signal_32_Bit_Unsigned_M    0
#define MAX_Message3_Signal_32_Bit_Unsigned_M    0

#define CAN_TO_REAL_Message3_Signal_32_Bit_Unsigned_M(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message3_Signal_32_Bit_Unsigned_M(x) (uint32_t)(((x) - 0) / 1)

#define SET_Message3_Signal_32_Bit_Unsigned_M_Raw(buf,val) {\
   buf[3] &= ~(uint8_t)(0x07 << 0);\
   buf[3] |=  (uint8_t)(((val) >> 29) & 0x07) << 0;\
   buf[4] &= ~(uint8_t)(0xFF << 0);\
   buf[4] |=  (uint8_t)(((val) >> 21) & 0xFF) << 0;\
   buf[5] &= ~(uint8_t)(0xFF << 0);\
   buf[5] |=  (uint8_t)(((val) >> 13) & 0xFF) << 0;\
   buf[6] &= ~(uint8_t)(0xFF << 0);\
   buf[6] |=  (uint8_t)(((val) >>  5) & 0xFF) << 0;\
   buf[7] &= ~(uint8_t)(0x1F << 3);\
   buf[7] |=  (uint8_t)(((val) >>  0) & 0x1F) << 3;\
}

#define SET_Message3_Signal_32_Bit_Unsigned_M(buf,val) \
   SET_Message3_Signal_32_Bit_Unsigned_M_Raw(buf,REAL_TO_CAN_Message3_Signal_32_Bit_Unsigned_M(val))

#define GET_Message3_Signal_32_Bit_Unsigned_M_Raw(buf) (uint32_t) (0\
   | ((+(uint32_t)(buf[3] >> 0) & 0x07) << 29) \
   | ((+(uint32_t)(buf[4] >> 0) & 0xFF) << 21) \
   | ((+(uint32_t)(buf[5] >> 0) & 0xFF) << 13) \
   | ((+(uint32_t)(buf[6] >> 0) & 0xFF) << 5) \
   | ((+(uint32_t)(buf[7] >> 3) & 0x1F) << 0) \
)

#define GET_Message3_Signal_32_Bit_Unsigned_M(buf) \
   CAN_TO_REAL_Message3_Signal_32_Bit_Unsigned_M(GET_Message3_Signal_32_Bit_Unsigned_M_Raw(buf))

/**
 * \section Message Message2
 */
/**
 * \brief ID of message 'Message2'
 */
#define ID_Message2 0x2

/**
 * \brief Is ID of message 'Message2' extended?
 */
#define EXT_Message2 false

/**
 * \brief DLC of message 'Message2'
 */
#define DLC_Message2 8

/**
 * \brief SETTERs for message 'Message2'
 * - SET_Message2_Signal_64_Bit_Signed_M(buf, value)
 */

/**
 * \brief GETTERs for message 'Message2'
 * - GET_Message2_Signal_64_Bit_Signed_M(buf)
 */

/**
 * \subsection Signal Signal_64_Bit_Signed_M
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message2_Signal_64_Bit_Signed_M   ""
#define OFFSET_Message2_Signal_64_Bit_Signed_M 0
#define FACTOR_Message2_Signal_64_Bit_Signed_M 1
#define MIN_Message2_Signal_64_Bit_Signed_M    0
#define MAX_Message2_Signal_64_Bit_Signed_M    0

#define CAN_TO_REAL_Message2_Signal_64_Bit_Signed_M(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message2_Signal_64_Bit_Signed_M(x) (int64_t)(((x) - 0) / 1)

#define SET_Message2_Signal_64_Bit_Signed_M_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0xFF << 0);\
   buf[0] |=  (uint8_t)(((val) >> 56) & 0xFF) << 0;\
   buf[1] &= ~(uint8_t)(0xFF << 0);\
   buf[1] |=  (uint8_t)(((val) >> 48) & 0xFF) << 0;\
   buf[2] &= ~(uint8_t)(0xFF << 0);\
   buf[2] |=  (uint8_t)(((val) >> 40) & 0xFF) << 0;\
   buf[3] &= ~(uint8_t)(0xFF << 0);\
   buf[3] |=  (uint8_t)(((val) >> 32) & 0xFF) << 0;\
   buf[4] &= ~(uint8_t)(0xFF << 0);\
   buf[4] |=  (uint8_t)(((val) >> 24) & 0xFF) << 0;\
   buf[5] &= ~(uint8_t)(0xFF << 0);\
   buf[5] |=  (uint8_t)(((val) >> 16) & 0xFF) << 0;\
   buf[6] &= ~(uint8_t)(0xFF << 0);\
   buf[6] |=  (uint8_t)(((val) >>  8) & 0xFF) << 0;\
   buf[7] &= ~(uint8_t)(0xFF << 0);\
   buf[7] |=  (uint8_t)(((val) >>  0) & 0xFF) << 0;\
}

#define SET_Message2_Signal_64_Bit_Signed_M(buf,val) \
   SET_Message2_Signal_64_Bit_Signed_M_Raw(buf,REAL_TO_CAN_Message2_Signal_64_Bit_Signed_M(val))

#define GET_Message2_Signal_64_Bit_Signed_M_Raw(buf) (int64_t) (0\
   | ((+(uint64_t)(buf[0] >> 0) & 0xFF) << 56) \
   | ((+(uint64_t)(buf[1] >> 0) & 0xFF) << 48) \
   | ((+(uint64_t)(buf[2] >> 0) & 0xFF) << 40) \
   | ((+(uint64_t)(buf[3] >> 0) & 0xFF) << 32) \
   | ((+(uint64_t)(buf[4] >> 0) & 0xFF) << 24) \
   | ((+(uint64_t)(buf[5] >> 0) & 0xFF) << 16) \
   | ((+(uint64_t)(buf[6] >> 0) & 0xFF) << 8) \
   | ((+(uint64_t)(buf[7] >> 0) & 0xFF) << 0) \
)

#define GET_Message2_Signal_64_Bit_Signed_M(buf) \
   CAN_TO_REAL_Message2_Signal_64_Bit_Signed_M(GET_Message2_Signal_64_Bit_Signed_M_Raw(buf))

/**
 * \section Message Message1
 */
/**
 * \brief ID of message 'Message1'
 */
#define ID_Message1 0x1

/**
 * \brief Is ID of message 'Message1' extended?
 */
#define EXT_Message1 false

/**
 * \brief DLC of message 'Message1'
 */
#define DLC_Message1 8

/**
 * \brief SETTERs for message 'Message1'
 * - SET_Message1_Signal_8_Bit_Signed_M(buf, value)
 * - SET_Message1_Signal_16_Bit_Signed_M(buf, value)
 * - SET_Message1_Signal_32_Bit_Signed_M(buf, value)
 */

/**
 * \brief GETTERs for message 'Message1'
 * - GET_Message1_Signal_8_Bit_Signed_M(buf)
 * - GET_Message1_Signal_16_Bit_Signed_M(buf)
 * - GET_Message1_Signal_32_Bit_Signed_M(buf)
 */

/**
 * \subsection Signal Signal_8_Bit_Signed_M
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message1_Signal_8_Bit_Signed_M   "km/h"
#define OFFSET_Message1_Signal_8_Bit_Signed_M 0
#define FACTOR_Message1_Signal_8_Bit_Signed_M 1
#define MIN_Message1_Signal_8_Bit_Signed_M    0
#define MAX_Message1_Signal_8_Bit_Signed_M    0

#define CAN_TO_REAL_Message1_Signal_8_Bit_Signed_M(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message1_Signal_8_Bit_Signed_M(x) (int8_t)(((x) - 0) / 1)

#define SET_Message1_Signal_8_Bit_Signed_M_Raw(buf,val) {\
   buf[0] &= ~(uint8_t)(0x3F << 0);\
   buf[0] |=  (uint8_t)(((val) >>  2) & 0x3F) << 0;\
   buf[1] &= ~(uint8_t)(0x03 << 6);\
   buf[1] |=  (uint8_t)(((val) >>  0) & 0x03) << 6;\
}

#define SET_Message1_Signal_8_Bit_Signed_M(buf,val) \
   SET_Message1_Signal_8_Bit_Signed_M_Raw(buf,REAL_TO_CAN_Message1_Signal_8_Bit_Signed_M(val))

#define GET_Message1_Signal_8_Bit_Signed_M_Raw(buf) (int8_t) (0\
   | ((+(uint8_t)(buf[0] >> 0) & 0x3F) << 2) \
   | ((+(uint8_t)(buf[1] >> 6) & 0x03) << 0) \
)

#define GET_Message1_Signal_8_Bit_Signed_M(buf) \
   CAN_TO_REAL_Message1_Signal_8_Bit_Signed_M(GET_Message1_Signal_8_Bit_Signed_M_Raw(buf))

/**
 * \subsection Signal Signal_16_Bit_Signed_M
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message1_Signal_16_Bit_Signed_M   ""
#define OFFSET_Message1_Signal_16_Bit_Signed_M 0
#define FACTOR_Message1_Signal_16_Bit_Signed_M 1
#define MIN_Message1_Signal_16_Bit_Signed_M    0
#define MAX_Message1_Signal_16_Bit_Signed_M    0

#define CAN_TO_REAL_Message1_Signal_16_Bit_Signed_M(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message1_Signal_16_Bit_Signed_M(x) (int16_t)(((x) - 0) / 1)

#define SET_Message1_Signal_16_Bit_Signed_M_Raw(buf,val) {\
   buf[1] &= ~(uint8_t)(0x0F << 0);\
   buf[1] |=  (uint8_t)(((val) >> 12) & 0x0F) << 0;\
   buf[2] &= ~(uint8_t)(0xFF << 0);\
   buf[2] |=  (uint8_t)(((val) >>  4) & 0xFF) << 0;\
   buf[3] &= ~(uint8_t)(0x0F << 4);\
   buf[3] |=  (uint8_t)(((val) >>  0) & 0x0F) << 4;\
}

#define SET_Message1_Signal_16_Bit_Signed_M(buf,val) \
   SET_Message1_Signal_16_Bit_Signed_M_Raw(buf,REAL_TO_CAN_Message1_Signal_16_Bit_Signed_M(val))

#define GET_Message1_Signal_16_Bit_Signed_M_Raw(buf) (int16_t) (0\
   | ((+(uint16_t)(buf[1] >> 0) & 0x0F) << 12) \
   | ((+(uint16_t)(buf[2] >> 0) & 0xFF) << 4) \
   | ((+(uint16_t)(buf[3] >> 4) & 0x0F) << 0) \
)

#define GET_Message1_Signal_16_Bit_Signed_M(buf) \
   CAN_TO_REAL_Message1_Signal_16_Bit_Signed_M(GET_Message1_Signal_16_Bit_Signed_M_Raw(buf))

/**
 * \subsection Signal Signal_32_Bit_Signed_M
 */
/**
 * \paragraph Constants
 */
#define UNIT_Message1_Signal_32_Bit_Signed_M   ""
#define OFFSET_Message1_Signal_32_Bit_Signed_M 0
#define FACTOR_Message1_Signal_32_Bit_Signed_M 1
#define MIN_Message1_Signal_32_Bit_Signed_M    0
#define MAX_Message1_Signal_32_Bit_Signed_M    0

#define CAN_TO_REAL_Message1_Signal_32_Bit_Signed_M(x) ((x) * 1 + 0)
#define REAL_TO_CAN_Message1_Signal_32_Bit_Signed_M(x) (int32_t)(((x) - 0) / 1)

#define SET_Message1_Signal_32_Bit_Signed_M_Raw(buf,val) {\
   buf[3] &= ~(uint8_t)(0x03 << 0);\
   buf[3] |=  (uint8_t)(((val) >> 30) & 0x03) << 0;\
   buf[4] &= ~(uint8_t)(0xFF << 0);\
   buf[4] |=  (uint8_t)(((val) >> 22) & 0xFF) << 0;\
   buf[5] &= ~(uint8_t)(0xFF << 0);\
   buf[5] |=  (uint8_t)(((val) >> 14) & 0xFF) << 0;\
   buf[6] &= ~(uint8_t)(0xFF << 0);\
   buf[6] |=  (uint8_t)(((val) >>  6) & 0xFF) << 0;\
   buf[7] &= ~(uint8_t)(0x3F << 2);\
   buf[7] |=  (uint8_t)(((val) >>  0) & 0x3F) << 2;\
}

#define SET_Message1_Signal_32_Bit_Signed_M(buf,val) \
   SET_Message1_Signal_32_Bit_Signed_M_Raw(buf,REAL_TO_CAN_Message1_Signal_32_Bit_Signed_M(val))

#define GET_Message1_Signal_32_Bit_Signed_M_Raw(buf) (int32_t) (0\
   | ((+(uint32_t)(buf[3] >> 0) & 0x03) << 30) \
   | ((+(uint32_t)(buf[4] >> 0) & 0xFF) << 22) \
   | ((+(uint32_t)(buf[5] >> 0) & 0xFF) << 14) \
   | ((+(uint32_t)(buf[6] >> 0) & 0xFF) << 6) \
   | ((+(uint32_t)(buf[7] >> 2) & 0x3F) << 0) \
)

#define GET_Message1_Signal_32_Bit_Signed_M(buf) \
   CAN_TO_REAL_Message1_Signal_32_Bit_Signed_M(GET_Message1_Signal_32_Bit_Signed_M_Raw(buf))


/**
 * \section Value-Tables (converted to enums)
 */
#endif //AUTO_DBC_PARSER_TEST_H
